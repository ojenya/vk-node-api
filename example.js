const VkBot = require('node-vk-bot-api')
const Session = require('node-vk-bot-api/lib/session')
const Markup = require('node-vk-bot-api/lib/markup');
const Stage = require('node-vk-bot-api/lib/stage');
const Scene = require('node-vk-bot-api/lib/scene');
const bot = new VkBot("12a362057da8855f031764e0f0de870c7a4fea657117897a8ecaae7c4fd7554f042f7288342816420ec93")

const MongoClient = require('mongodb').MongoClient;
const uri = "mongodb+srv://j3nqa:093zheka4067@cluster0-ksudn.gcp.mongodb.net/test?retryWrites=true&w=majority";
const client = new MongoClient(uri, { useNewUrlParser: true });


var request = require("request")
var url = "http://raspmath.isu.ru/getSchedule"
const session = new Session();

const scene = new Scene('start',
    (ctx) => {
        ctx.scene.next();
        ctx.reply('–¢—ã –Ω–∞—Å –∑–Ω–∞–µ—à—å, –∞ –º—ã —Ç–µ–±—è –µ—â–µ –Ω–µ—Çüòî', null, Markup
            .keyboard([

                [
                    Markup.button('–ú–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç', 'secondary'),
                    Markup.button('–ë–∞–∫–∞–ª–∞–≤—Ä', 'secondary'),
                ],
                [
                    Markup.button('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', 'primary'),
                ],
            ]));
    },
    (ctx) => {

        ctx.session.status = ctx.message.body;
        console.log(ctx.session.status)
        ctx.scene.next();
        if (ctx.session.status === '–ú–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç' || ctx.session.status === '–ë–∞–∫–∞–ª–∞–≤—Ä') {
            ctx.scene.leave()
            ctx.scene.enter('checkStatus')

        } else if (ctx.session.status === '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å') {
            ctx.reply("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
            ctx.scene.leave()

            ctx.scene.enter('start')
        } else {
            ctx.reply("–ù–∞–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ —Ç—É–ø—ã–µ0)0")
            ctx.scene.leave()

            ctx.scene.enter('start')
        }

    })



const checkStatus = new Scene('checkStatus',
    (ctx) => {
        ctx.scene.next();
        if (ctx.session.status === "–ë–∞–∫–∞–ª–∞–≤—Ä") {
            ctx.reply('–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å', null, Markup
                .keyboard([
                    [
                        Markup.button('–ü–µ—Ä–≤—ã–π', 'secondary'),
                        Markup.button('–í—Ç–æ—Ä–æ–π', 'secondary'),
                    ],
                    [
                        Markup.button('–¢—Ä–µ—Ç–∏–π', 'secondary'),
                        Markup.button('–ß–µ—Ç–≤–µ—Ä—Ç—ã–π', 'secondary'),
                    ],
                ]));
        } else if (ctx.session.status === "–ú–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç") {
            ctx.reply('–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å', null, Markup
                .keyboard([
                    [
                        Markup.button('–ü–µ—Ä–≤—ã–π', 'secondary'),
                        Markup.button('–í—Ç–æ—Ä–æ–π', 'secondary'),
                    ],
                ]));
        } else if (ctx.session.status === "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å") {
            ctx.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞!');

        }
    },
    (ctx) => {
        ctx.session.course = ctx.message.body;
        console.log(ctx.session.course)
        ctx.scene.leave()
        ctx.scene.enter('checkCourse')
    }

)





const checkCourse = new Scene('checkCourse',
    (ctx) => {
        ctx.scene.next();
        if (ctx.session.status === "–ë–∞–∫–∞–ª–∞–≤—Ä" && ctx.session.course === "–ü–µ—Ä–≤—ã–π") {

            client.connect(err => {
                const collection = client.db("schedule").collection("group");
                // perform actions on the collection object

                collection.find({ course: "1" }).toArray(function(err, results) {
                    send_course(results);
                });
                client.close();
            });

            function send_course(group) {
                arr = []
                array = [];
                group.forEach(element => {
                    array = [];
                    array.push(Markup.button(element.group_id, 'secondary'))
                    arr.push(array)
                });
                ctx.reply('–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É', null, Markup
                    .keyboard(
                        arr
                    ));
            }

        }

        if (ctx.session.status === "–ë–∞–∫–∞–ª–∞–≤—Ä" && ctx.session.course === "–í—Ç–æ—Ä–æ–π") {

            client.connect(err => {
                const collection = client.db("schedule").collection("group");
                // perform actions on the collection object

                collection.find({ course: "2" }).toArray(function(err, results) {
                    send_course(results);
                });
                client.close();
            });

            function send_course(group) {
                arr = []
                array = [];
                group.forEach(element => {
                    array = [];
                    array.push(Markup.button(element.group_id, 'secondary'))
                    arr.push(array)
                });
                ctx.reply('–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É', null, Markup
                    .keyboard(
                        arr
                    ));
            }

        }
        if (ctx.session.status === "–ë–∞–∫–∞–ª–∞–≤—Ä" && ctx.session.course === "–¢—Ä–µ—Ç–∏–π") {

            client.connect(err => {
                const collection = client.db("schedule").collection("group");
                // perform actions on the collection object

                collection.find({ course: "3" }).toArray(function(err, results) {
                    send_course(results);
                });
                client.close();
            });

            function send_course(group) {
                arr = []
                array = [];
                group.forEach(element => {
                    array = [];
                    array.push(Markup.button(element.group_id, 'secondary'))
                    arr.push(array)
                });
                ctx.reply('–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É', null, Markup
                    .keyboard(
                        arr
                    ));
            }

        }
        if (ctx.session.status === "–ë–∞–∫–∞–ª–∞–≤—Ä" && ctx.session.course === "–ß–µ—Ç–≤–µ—Ä—Ç—ã–π") {

            client.connect(err => {
                const collection = client.db("schedule").collection("group");
                // perform actions on the collection object

                collection.find({ course: "4" }).toArray(function(err, results) {
                    send_course(results);
                });
                client.close();
            });

            function send_course(group) {
                arr = []
                array = [];
                group.forEach(element => {
                    array = [];
                    array.push(Markup.button(element.group_id, 'secondary'))
                    arr.push(array)
                });
                ctx.reply('–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É', null, Markup
                    .keyboard(
                        arr
                    ));
            }

        }
        if (ctx.session.status === "–ú–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç" && ctx.session.course === "–ü–µ—Ä–≤—ã–π") {

            client.connect(err => {
                const collection = client.db("schedule").collection("group");
                // perform actions on the collection object

                collection.find({ course: "5" }).toArray(function(err, results) {
                    send_course(results);
                });
                client.close();
            });

            function send_course(group) {
                arr = []
                array = [];
                group.forEach(element => {
                    array = [];
                    array.push(Markup.button(element.group_id, 'secondary'))
                    arr.push(array)
                });
                ctx.reply('–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É', null, Markup
                    .keyboard(
                        arr
                    ));
            }

        }
        if (ctx.session.status === "–ú–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç" && ctx.session.course === "–í—Ç–æ—Ä–æ–π") {

            client.connect(err => {
                const collection = client.db("schedule").collection("group");
                // perform actions on the collection object

                collection.find({ course: "6" }).toArray(function(err, results) {
                    send_course(results);
                });
                client.close();
            });

            function send_course(group) {
                arr = []
                array = [];
                group.forEach(element => {
                    array = [];
                    array.push(Markup.button(element.group_id, 'secondary'))
                    arr.push(array)
                });
                ctx.reply('–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É', null, Markup
                    .keyboard(
                        arr
                    ));
            }

        }
    },
    (ctx) => {
        ctx.session.group = ctx.message.body;
        console.log(ctx.session.group)
        ctx.scene.leave()
        ctx.scene.enter('checkGroup')
    })

const checkGroup = new Scene('checkGroup',
    (ctx) => {
        ctx.session.group = ctx.message.body;
        ctx.scene.next();
        ctx.reply('–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å', null, Markup
            .keyboard([
                [
                    Markup.button('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'secondary'),
                    Markup.button('–í—Ç–æ—Ä–Ω–∏–∫', 'secondary'),

                ],
                [
                    Markup.button('–°—Ä–µ–¥–∞', 'secondary'),
                    Markup.button('–ß–µ—Ç–≤–µ—Ä–≥', 'secondary'),

                ],
                [
                    Markup.button('–ü—è—Ç–Ω–∏—Ü–∞', 'secondary'),
                    Markup.button('–°—É–±–±–æ—Ç–∞', 'secondary'),

                ],
                [

                    Markup.button('–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', 'secondary'),

                ]

            ]));

    },
    (ctx) => {
        ctx.session.day = ctx.message.body;
        if (ctx.message.body === "–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É") {
            ctx.scene.leave()
            ctx.scene.enter('start')
        } else {
            request({
                url: url,
                json: true
            }, async function(error, response, body) {
                body.sort(function(obj1, obj2) {
                    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
                    return obj1.pair_start_time - obj2.pair_start_time;
                });
                console.log(response.statusCode)
                if (!error && response.statusCode === 200) {
                    // Print the json response
                    for (let i = 0; i < body.length; i++) {
                        if (body[i].group_name === ctx.session.group) {
                            if (ctx.session.day === body[i].weekday) {

                                await ctx.reply(body[i].pair_start_time + "-" + body[i].pair_end_time + "\n" + body[i].subject_name + " " + "\n" + body[i].pair_type + "\n" + body[i].class_name + "\n" + body[i].week_type)
                            }
                        }
                    }
                }
            })
            ctx.scene.next()
        }
    },
    (ctx) => {

        if (ctx.message.body === "–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É") {



            ctx.scene.leave()
            ctx.scene.enter('start')
        } else {
            ctx.scene.enter('checkGroup', 1)
        }


    }
)

const stage = new Stage(scene, checkStatus, checkCourse, checkGroup);

bot.use(session.middleware());
bot.use(stage.middleware());

bot.command('/r', (ctx) => {
    ctx.scene.enter('start');
});

bot.command('/set', (ctx) => {
    ctx.scene.enter('start');
});

bot.startPolling();


// 12a362057da8855f031764e0f0de870c7a4fea657117897a8ecaae7c4fd7554f042f7288342816420ec93